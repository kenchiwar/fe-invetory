import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";
import eslintPluginPrettier from "eslint-plugin-prettier/recommended";
export default tseslint.config(
  { ignores: ["dist"] }, // B·ªè qua th∆∞ m·ª•c "dist" khi ch·∫°y ESLint
  {
    extends: [js.configs.recommended,eslintPluginPrettier, ...tseslint.configs.recommended], // K·∫ø th·ª´a c√°c c·∫•u h√¨nh ƒë·ªÅ xu·∫•t c·ªßa ESLint v√† TypeScript
    files: ["**/*.{ts,tsx,jsx}"], // Ch·ªâ ki·ªÉm tra c√°c file TypeScript (*.ts, *.tsx)
    languageOptions: {
      ecmaVersion: 2020, // S·ª≠ d·ª•ng phi√™n b·∫£n ECMAScript 2020
      globals: globals.browser, // ƒê·ªãnh nghƒ©a c√°c bi·∫øn to√†n c·ª•c c·ªßa tr√¨nh duy·ªát
    },
    plugins: {
      "react-hooks": reactHooks, // Plugin h·ªó tr·ª£ ki·ªÉm tra quy t·∫Øc React Hooks
      "react-refresh": reactRefresh, // Plugin h·ªó tr·ª£ React Fast Refresh
    },
    rules: {
      // üü¢ React Hooks
      ...reactHooks.configs.recommended.rules, // K·∫ø th·ª´a c√°c quy t·∫Øc ƒë·ªÅ xu·∫•t c·ªßa React Hooks

      // üîµ C·∫•u tr√∫c code
      "space-before-function-paren": ["error", "always"], // B·∫Øt bu·ªôc c√≥ space tr∆∞·ªõc d·∫•u `()`
      "indent": ["error", 2], // S·ª≠ d·ª•ng 2 spaces ƒë·ªÉ th·ª•t l·ªÅ
      "no-mixed-spaces-and-tabs": "error", // C·∫•m tr·ªôn l·∫´n tab v√† space

      // üü† Quy t·∫Øc v·ªÅ ƒë·ªãnh d·∫°ng
      "block-spacing": "error", // Y√™u c·∫ßu c√≥ kho·∫£ng tr·∫Øng b√™n trong `{}` c·ªßa block code
      "newline-after-var": ["error", "always"], // B·∫Øt bu·ªôc c√≥ d√≤ng tr·ªëng sau khi khai b√°o bi·∫øn
      "no-tabs": 0, // Kh√¥ng c·∫•m tab (c√≥ th·ªÉ d√πng t√πy theo style)
      "comma-dangle": ["error", "never"], // Kh√¥ng ƒë∆∞·ª£c c√≥ d·∫•u `,` cu·ªëi c√πng trong object, array
      "object-curly-spacing": [
        "error",
        "always",
        { arraysInObjects: false, objectsInObjects: false }
      ], // C√≥ space b√™n trong `{}` nh∆∞ng kh√¥ng c√≥ trong object l·ªìng nhau
      "spaced-comment": ["error", "always"], // B·∫Øt bu·ªôc c√≥ space sau `//`
      "no-trailing-spaces": ["error", { skipBlankLines: true }], // Kh√¥ng c√≥ space d∆∞ ·ªü cu·ªëi d√≤ng (tr·ª´ d√≤ng tr·ªëng)
      "keyword-spacing": ["error", { before: true }], // C√≥ space tr∆∞·ªõc `if`, `else`, `return`, ...
      "comma-spacing": ["error", { before: false, after: true }], // C√≥ space sau d·∫•u `,` nh∆∞ng kh√¥ng tr∆∞·ªõc
      "quotes": ["error", "double"], // B·∫Øt bu·ªôc d√πng d·∫•u nh√°y `"`
      "semi": ["error", "always"], // B·∫Øt bu·ªôc ph·∫£i c√≥ d·∫•u `;` ·ªü cu·ªëi d√≤ng

      // ‚ö†Ô∏è React Refresh
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ], // C·∫£nh b√°o n·∫øu m·ªôt component kh√¥ng ƒë∆∞·ª£c export ƒë√∫ng c√°ch (cho React Fast Refresh)
    },
  }
);
